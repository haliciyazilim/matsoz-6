InteractiveGrids.prototype._drawShape=InteractiveGrids.prototype.drawShape,InteractiveGrids.prototype.drawShape=function(e){return this._drawShape(e),this.shadowPath=this.path,this.path=null,this.shadowPath.set_style({fillColor:new RgbColor(.7,.7,.7,.5),strokeColor:new RgbColor(.3,.3,.3,.5)}),this._drawShape(e),this.path.class="draggable",this.path.set_style({fillColor:new RgbColor(Math.random(),Math.random(),Math.random(),.8),strokeColor:new RgbColor(.4,.4,.4,1)}),this},InteractiveGrids.prototype.isPathHorizontalOverflowed=function(){var e=new Rectangle(this.position,new Size(this.size*8,this.size*8));return e.contains(new Point(this.path.bounds.x,this.position.y))?e.contains(new Point(this.path.bounds.x+this.path.bounds.width,this.position.y))?!1:!0:!0},InteractiveGrids.prototype.isPathVerticalOverflowed=function(){var e=new Rectangle(this.position,new Size(this.size*8,this.size*8));return e.contains(new Point(this.position.x,this.path.bounds.y))?e.contains(new Point(this.position.x,this.path.bounds.y+this.path.bounds.height))?!1:!0:!0},InteractiveGrids.prototype.setPathPosition=function(e){this.path.position=this.position.add(e.multiply(this.size,this.size))},InteractiveGrids.prototype.animateToNewPosition=function(e){e.delay||(e.delay=0),e.speed||(e.speed=1);var t=this.path.position,n=e.position.multiply(this.size,this.size).add(this.position);this.path.animate({style:{position:n},duration:t.getDistance(n)*10/e.speed,delay:e.delay,callback:e.callback,animationType:"easeInEaseOut"})},InteractiveGrids.prototype.appendVertexLetters=function(){},InteractiveGrids.prototype.getPathPosition=function(){return this.path.position.subtract(this.position).divide(this.size,this.size)},InteractiveGrids.prototype.createTool=function(){var e=3,t=new Tool,n=this;return t.onMouseDown=function(e){this.item=null,e.item&&e.item.class=="draggable"&&(this.item=e.item,this.firstPosition=this.item.position,this.totalDelta=new Point(0,0))},t.onMouseDrag=function(e){if(this.item){this.totalDelta=this.totalDelta.add(e.delta);var t=this.item.position;this.item.position=this.firstPosition.add(Util.round(this.totalDelta.x,n.size),Util.round(this.totalDelta.y,n.size)),n.isPathVerticalOverflowed()&&(this.item.position=new Point(this.item.position.x,t.y)),n.isPathHorizontalOverflowed()&&(this.item.position=new Point(t.x,this.item.position.y))}},t.onMouseUp=function(e){this.item=null,this.firstPosition=null,this.totalDelta=null},t.activate(),this},InteractiveGrids.CreateShape=function(e){var t=[],n=new Point(1,1),r=new Point(0,0);switch(e){case 0:t.push(new Point(1,0)),t.push(new Point(0,2)),t.push(new Point(3,2)),n=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3)),r=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3));break;case 1:t.push(new Point(0,2)),t.push(new Point(2,2)),t.push(new Point(1,0));var i=Util.randomInteger(1,3);n=new Point(i,i),r=new Point(Util.randomInteger(1,5),Util.randomInteger(1,5));break;case 2:t.push(new Point(0,0)),t.push(new Point(0,1)),t.push(new Point(1,1)),n=new Point(Util.randomInteger(1,5),Util.randomInteger(1,5)),r=new Point(Util.randomInteger(1,5),Util.randomInteger(1,5));break;case 3:t.push(new Point(1,1)),t.push(new Point(1,0)),t.push(new Point(0,1)),n=new Point(Util.randomInteger(1,5),Util.randomInteger(1,5)),r=new Point(Util.randomInteger(1,5),Util.randomInteger(1,5));break;case 4:t.push(new Point(0,2)),t.push(new Point(2,2)),t.push(new Point(3,0)),n=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3)),r=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3));break;case 5:t.push(new Point(2,0)),t.push(new Point(2,2)),t.push(new Point(0,2)),t.push(new Point(0,0)),n=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3)),r=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3));break;case 6:t.push(new Point(0,0)),t.push(new Point(1,2)),t.push(new Point(3,2)),t.push(new Point(2,0)),n=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3)),r=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3));break;case 7:t.push(new Point(1,0)),t.push(new Point(0,2)),t.push(new Point(3,2)),t.push(new Point(5,0)),n=new Point(1,Util.randomInteger(1,3)),r=new Point(Util.randomInteger(1,3),Util.randomInteger(1,3));break;case 8:t.push(new Point(0,2)),t.push(new Point(1,4)),t.push(new Point(3,4)),t.push(new Point(4,2)),t.push(new Point(2,0)),r=new Point(Util.randomInteger(1,4),Util.randomInteger(1,4));break;case 9:t.push(new Point(0,2)),t.push(new Point(1,4)),t.push(new Point(4,5)),t.push(new Point(5,2)),t.push(new Point(2,0)),r=new Point(Util.randomInteger(1,4),Util.randomInteger(1,4));break;case 10:t.push(new Point(0,2)),t.push(new Point(1,4)),t.push(new Point(3,4)),t.push(new Point(4,2)),t.push(new Point(3,0)),t.push(new Point(1,0)),r=new Point(Util.randomInteger(1,4),Util.randomInteger(1,4));break;case 11:t.push(new Point(0,2)),t.push(new Point(1,3)),t.push(new Point(3,4)),t.push(new Point(4,2)),t.push(new Point(3,0)),t.push(new Point(1,1)),r=new Point(Util.randomInteger(1,4),Util.randomInteger(1,4))}n=new Point(1,1);for(var s=0;s<t.length;s++)t[s]=t[s].multiply(n).add(r);return t};