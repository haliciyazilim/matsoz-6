function ciz(e,t,n){function l(e,t,n,s){e.delay=2e3,e.surfaces.topSurface.pivotsX[0]=new Point3(0,0,0),e.surfaces.topSurface.rotationsX[0]=Math.PI/2,e.surfaces.bottomSurface.pivotsX[0]=new Point3(0,0,0),e.surfaces.bottomSurface.rotationsX[0]=Math.PI/2,e.surfaces.leftSurface.pivotsX[0]=new Point3(0,0,0),e.surfaces.leftSurface.rotationsX[0]=Math.PI/2,e.surfaces.rightSurface.pivotsX[0]=new Point3(0,0,0),e.surfaces.rightSurface.rotationsX[0]=Math.PI/2,e.surfaces.frontSurface.pivotsX[0]=new Point3(0,0,0),e.surfaces.frontSurface.rotationsX[0]=Math.PI/2,e.surfaces.backSurface.pivotsX[0]=new Point3(0,0,0),e.surfaces.backSurface.rotationsX[0]=Math.PI/2,e.rotateSurfaceX(e.surfaces.topSurface,-Math.PI/2,new Point3(0,0,0),!0),e.rotateSurfaceX(e.surfaces.bottomSurface,-Math.PI/2,new Point3(0,0,0),!0),e.rotateSurfaceX(e.surfaces.leftSurface,-Math.PI/2,new Point3(0,0,0),!0),e.rotateSurfaceX(e.surfaces.rightSurface,-Math.PI/2,new Point3(0,0,0),!0),e.rotateSurfaceX(e.surfaces.frontSurface,-Math.PI/2,new Point3(0,0,0),!0),e.rotateSurfaceX(e.surfaces.backSurface,-Math.PI/2,new Point3(0,0,0),!0);var o=new AnimationHelper({height:0});u&&u.remove();var u=e.project();return Interaction.noktaArray=[],Interaction.grup=new Group,o.animate({style:{height:n},duration:1e3,delay:3e3,animationType:"easeInEaseOut",update:function(){s?e.init(r,this.height,i,s,t):e.init(r,this.height,i,t),u=e.project()},callback:function(){koordinatBack=e.surfaces.backSurface.get2DPoints(t),koordinatFront=e.surfaces.frontSurface.get2DPoints(t),koordinatLeft=e.surfaces.leftSurface.get2DPoints(t),koordinatRight=e.surfaces.rightSurface.get2DPoints(t),koordinat=[koordinatBack,koordinatFront],renk=["black","yellow","red","green"];var n;for(var r=0;r<koordinat.length;r++)for(var i=0;i<4;i++)n=new Path.Circle(new Point(koordinat[r][i].x,koordinat[r][i].y),5),n.class="nokta",n.myId="nokta"+r+i,n.name="nokta"+r+i,Interaction.noktaArray.push(n)}}),u}var r=100,i=100,s=100,o=180,u=70,a=50,f=.5;t||(t=300),n||(n=120),matrix=Util.createProjectionMatrixForObjectAt(100,120),matrix2=Util.createProjectionMatrixForObjectAt(t,n),matrix3=Util.createProjectionMatrixForObjectAt(450,120);switch(e){case"dikKare":shapeDikKarePrizma=new ExpandablePrism(r,0,i,matrix2),l(shapeDikKarePrizma,matrix2,s);break;case"egikKare":shapeEgikKare=new ExpandableSkewedPrism(r,0,i,0,matrix2),l(shapeEgikKare,matrix2,s,f);break;case"dikdortgen":shapeDikdortgenPrizma=new ExpandableRectangularPrism(r,0,i,matrix2),l(shapeDikdortgenPrizma,matrix2,s);break;case"paralelKenar":shapeParalelKenar=new ExpandableParallelogramPrism(r,0,i,matrix2),l(shapeParalelKenar,matrix2,s);break;case"esKenar":shapeEsKenar=new ExpandableEquilateralPrism(r,0,i,matrix2),l(shapeEsKenar,matrix2,s);break;case"ucgen":shapeUcgen=new ExpandableTrianglePrism(r,0,i,matrix2),l(shapeUcgen,matrix2,s)}};